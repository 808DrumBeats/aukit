// Copyright AudioKit. All Rights Reserved. Revision History at http://github.com/AudioKit/AudioKit/
// This file was auto-autogenerated by scripts and templates at http://github.com/AudioKit/AudioKitDevTools/

import AVFoundation
import CAudioKit

/// Distortion using a modified hyperbolic tangent function.
public class TanhDistortion: Node, AudioUnitContainer, Toggleable {

    /// Unique four-letter identifier "dist"
    public static let ComponentDescription = AudioComponentDescription(effect: "dist")

    /// Internal type of audio unit for this node
    public typealias AudioUnitType = AudioUnitBase

    /// Internal audio unit 
    public private(set) var internalAU: AudioUnitType?

    // MARK: - Parameters

    /// Specification details for pregain
    public static let pregainDef = NodeParameterDef(
        identifier: "pregain",
        name: "Pregain",
        address: akGetParameterAddress("TanhDistortionParameterPregain"),
        range: 0.0 ... 10.0,
        unit: .generic,
        flags: .default)

    /// Determines gain applied to the signal before waveshaping. A value of 1 gives slight distortion.
    @Parameter(pregainDef) public var pregain: AUValue

    /// Specification details for postgain
    public static let postgainDef = NodeParameterDef(
        identifier: "postgain",
        name: "Postgain",
        address: akGetParameterAddress("TanhDistortionParameterPostgain"),
        range: 0.0 ... 10.0,
        unit: .generic,
        flags: .default)

    /// Gain applied after waveshaping
    @Parameter(postgainDef) public var postgain: AUValue

    /// Specification details for positiveShapeParameter
    public static let positiveShapeParameterDef = NodeParameterDef(
        identifier: "positiveShapeParameter",
        name: "Positive Shape Parameter",
        address: akGetParameterAddress("TanhDistortionParameterPositiveShapeParameter"),
        range: -10.0 ... 10.0,
        unit: .generic,
        flags: .default)

    /// Shape of the positive part of the signal. A value of 0 gets a flat clip.
    @Parameter(positiveShapeParameterDef) public var positiveShapeParameter: AUValue

    /// Specification details for negativeShapeParameter
    public static let negativeShapeParameterDef = NodeParameterDef(
        identifier: "negativeShapeParameter",
        name: "Negative Shape Parameter",
        address: akGetParameterAddress("TanhDistortionParameterNegativeShapeParameter"),
        range: -10.0 ... 10.0,
        unit: .generic,
        flags: .default)

    /// Like the positive shape parameter, only for the negative part.
    @Parameter(negativeShapeParameterDef) public var negativeShapeParameter: AUValue

    // MARK: - Initialization

    /// Initialize this distortion node
    ///
    /// - Parameters:
    ///   - input: Input node to process
    ///   - pregain: Determines gain applied to the signal before waveshaping. A value of 1 gives slight distortion.
    ///   - postgain: Gain applied after waveshaping
    ///   - positiveShapeParameter: Shape of the positive part of the signal. A value of 0 gets a flat clip.
    ///   - negativeShapeParameter: Like the positive shape parameter, only for the negative part.
    ///
    public init(
        _ input: Node,
        pregain: AUValue = 2.0,
        postgain: AUValue = 0.5,
        positiveShapeParameter: AUValue = 0.0,
        negativeShapeParameter: AUValue = 0.0
        ) {
        super.init(avAudioNode: AVAudioNode())

        instantiateAudioUnit { avAudioUnit in
            self.avAudioUnit = avAudioUnit
            self.avAudioNode = avAudioUnit

            guard let audioUnit = avAudioUnit.auAudioUnit as? AudioUnitType else {
                fatalError("Couldn't create audio unit")
            }
            self.internalAU = audioUnit

            self.pregain = pregain
            self.postgain = postgain
            self.positiveShapeParameter = positiveShapeParameter
            self.negativeShapeParameter = negativeShapeParameter
        }
        connections.append(input)
    }
}
