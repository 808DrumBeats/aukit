// Copyright AudioKit. All Rights Reserved. Revision History at http://github.com/AudioKit/AudioKit/
// This file was auto-autogenerated by scripts and templates at http://github.com/AudioKit/AudioKitDevTools/

import AVFoundation
import CAudioKit

/// AudioKit version of Apple's RingModulator Audio Unit
///
open class RingModulator: Node, Toggleable {

    fileprivate let effectAU = AVAudioUnitEffect(
    audioComponentDescription:
    AudioComponentDescription(appleEffect: kAudioUnitSubType_Distortion))

    /// Specification details for ringModFreq1
    public static let ringModFreq1Def = NodeParameterDef(
        identifier: "ringModFreq1",
        name: "Ring Mod Freq1",
        address: 3,
        defaultValue: 100,
        range: 0.5 ... 8000,
        unit: .hertz,
        flags: .default)

    /// Ring Mod Freq1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
    @Parameter(ringModFreq1Def) public var ringModFreq1: AUValue

    /// Specification details for ringModFreq2
    public static let ringModFreq2Def = NodeParameterDef(
        identifier: "ringModFreq2",
        name: "Ring Mod Freq2",
        address: 4,
        defaultValue: 100,
        range: 0.5 ... 8000,
        unit: .hertz,
        flags: .default)

    /// Ring Mod Freq2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
    @Parameter(ringModFreq2Def) public var ringModFreq2: AUValue

    /// Specification details for ringModBalance
    public static let ringModBalanceDef = NodeParameterDef(
        identifier: "ringModBalance",
        name: "Ring Mod Balance",
        address: 5,
        defaultValue: 50,
        range: 0 ... 100,
        unit: .percent,
        flags: .default)

    /// Ring Mod Balance (Percent) ranges from 0 to 100 (Default: 50)
    @Parameter(ringModBalanceDef) public var ringModBalance: AUValue

    /// Specification details for finalMix
    public static let finalMixDef = NodeParameterDef(
        identifier: "finalMix",
        name: "Final Mix",
        address: 15,
        defaultValue: 50,
        range: 0 ... 100,
        unit: .percent,
        flags: .default)

    /// Final Mix (Percent) ranges from 0 to 100 (Default: 50)
    @Parameter(finalMixDef) public var finalMix: AUValue

    /// Tells whether the node is processing (ie. started, playing, or active)
    public var isStarted = true

    /// Initialize the ring modulator node
    ///
    /// - parameter input: Input node to process
    /// - parameter ringModFreq1: Ring Mod Freq1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
    /// - parameter ringModFreq2: Ring Mod Freq2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
    /// - parameter ringModBalance: Ring Mod Balance (Percent) ranges from 0 to 100 (Default: 50)
    /// - parameter finalMix: Final Mix (Percent) ranges from 0 to 100 (Default: 50)
    ///
    public init(
        _ input: Node,
        ringModFreq1: AUValue = ringModFreq1Def.defaultValue,
        ringModFreq2: AUValue = ringModFreq2Def.defaultValue,
        ringModBalance: AUValue = ringModBalanceDef.defaultValue,
        finalMix: AUValue = finalMixDef.defaultValue) {
        super.init(avAudioNode: effectAU)
        connections.append(input)

        associateParams(with: effectAU)

        self.ringModFreq1 = ringModFreq1
        self.ringModFreq2 = ringModFreq2
        self.ringModBalance = ringModBalance
        self.finalMix = finalMix
    }

    /// Function to start, play, or activate the node, all do the same thing
    public func start() {
        effectAU.bypass = false
        isStarted = true
    }

    /// Function to stop or bypass the node, both are equivalent
    public func stop() {
        effectAU.bypass = true
        isStarted = false
    }
}
